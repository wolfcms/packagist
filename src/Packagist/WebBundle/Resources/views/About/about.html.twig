{% extends "PackagistWebBundle::layout.html.twig" %}

{% block content %}
    <div class="box clearfix">
        <h1>What is Wolf Extensions?</h1>
        <p>Wolf Extensions is a Composer package repository for Wolf CMS. It lets you find Wolf CMS extensions and lets Composer know where to get the code from.</p>

        <h1>How to submit extensions?</h1>
        <h2>Naming your extension</h2>
        <p>First of all, you must pick an extension name. This is a very important step since it cannot change and it should be unique enough to avoid conflicts in the future.</p>
        <p>The full extension name consists of a vendor name and a project name joined by a <code>/</code>. The vendor name exists to prevent naming conflicts. For example, by including a vendor name both <code>igorw</code> and <code>seldaek</code> can have an extension named <code>json</code> by naming their extensions <code>igorw/json</code> and <code>seldaek/json</code>.</p>
        <p>Here is a list of typical extension names for reference:
<pre>
// Acme is a company or person here, they can name their extension with a common name (Email).
// As long as it's in their own vendor namespace it does not conflict with anyone else.
acme/email
</pre></p>
        <p>Note that extension names are case-insensitive, but it's encouraged to use a dash (-) as separator instead of CamelCased names.</p>

        <h2>Creating a composer.json file</h2>
        <p>The composer.json file should reside at the top of your extension's git/svn/.. repository, and is the way you describe your extension to both Wolf Extensions and composer.</p>
        <p>A typical composer.json file looks like this:
<pre>
{
    "name": "your-vendor-name/your-extension-name",
    "description": "A short and sweet descript of what it does or provides.",
    "keywords": ["some-keyword", "keyword2"],
    "homepage": "http://example.com",
    "license": "GPLv3",
    "authors": [
        {
            "name": "Your name here",
            "email": "your-email-if-desired@example.com",
            "homepage": "http://example.com"
        }
    ],
    "type": "wolfcms-plugin",
    "require": {
        "wolfcms/wolfcms": ">=0.7.8"
    }
}
</pre>
Most of this information is obvious, keywords are tags, require is a list of dependencies that your extension has. This can of course be extensions, but also a php version. You can use ext-foo to require php extensions (e.g. ext-apc). Note that most extensions don't expose version information, so unless you know for sure it does, it's safer to use <code>"ext-apc": "*"</code> to allow any version of it.</p>
<p>The type entry should, for now, always state <code>"wolfcms-plugin"</code>. This information will be used by Composer and the composer/installers extension so it knows where to place the extension.</p>
<p>Known extension types include: wolfcms-plugin</p>
<p>Once you have this file committed in your repository root, you can <a href="{{ path('submit') }}">submit the extension</a> to Wolf Extensions by entering the public repository URL.</p>

        <h1>Managing extension versions</h1>
        <p>New versions of your extension are automatically fetched from tags you create in your source code repository.</p>
        <p>There are two ways to manage version numbering. The easiest is to just omit the version field from the composer.json file. If it is missing, the version name will be parsed from the tag and branch names. The other way which offers you a bit more flexibility is to define it yourself, but that means you should update the version field in the composer.json file before creating a tag, otherwise the tag will be considered broken and not imported. If you think you're likely to forget, you probably should use the first method.</p>
        <p>Tag/version names should match 'X.Y.Z', or 'vX.Y.Z', with an optional suffix for RC, beta, alpha or patch versions. They are tested by Wolf CMS using PHP's version_compare function. Here are a few examples of valid tag names:
<pre>
1.0.0
v1.0.0
1.10.5-RC1
v4.4.4beta2
v2.0.0-alpha
v2.0.4-p1
</pre>
        Branches will automatically appear as "dev" versions that are easily installable by anyone that wants to try your extensions's latest and greatest, but that does not mean you should not tag releases. The use of <a href="http://semver.org/">Semantic Versioning</a> is strongly encouraged.</p>

        <p>If you specify the version manually, it will be ignored by Wolf Extensions for branches, and tags will have to contain the same version number as the tag name to be valid, so there is really no benefit to doing this.</p>

        <h1>Update Schedule</h1>

        <p>New extensions will be crawled <strong>immediately</strong> after submission if you have JS enabled.</p>

        <p>Existing extensions without auto-updating (GitHub hook) will be crawled <strong>once a day</strong> for updates. When the GitHub hook is enabled, extensions are crawled whenever you push, or at least once a week in case the crawl failed. You can also trigger a manual update on your extension's page if you are logged-in as a maintainer.</p>

        <p>It is highly recommended to set up the <strong>GitHub service hook</strong> for all your extensions. This reduces the load on our side, and ensures your extension is updated almost instantly. To do so you can go to your GitHub repository, click the "Admin" button, then "Service Hooks". Pick "Packagist" in the list, and add the API key you will find on your <a href="{{ path('fos_user_profile_show') }}">profile</a>, plus your Wolf Extensions username if it is not the same as on GitHub. Next, make sure the url points to <code>"wolfextensions.org"</code> and finally, check the "Active" box before submitting the form.</p>

        <p>The search index is updated <strong>every five minutes</strong>. It will index (or reindex) any extension that has been crawled since the last time the search indexer ran.</p>
    </div>
{% endblock %}
